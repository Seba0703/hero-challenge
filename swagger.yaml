openapi: 3.0.1
info:
  title: Heroes API
  description: Heroes sample application
  license:
    name: Apache 2.0
    url: http://springdoc.org
  version: v0.0.1
externalDocs:
  description: Heroes Wiki Documentation
  url: https://github.com/Seba0703/hero-challenge#readme
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /v1/hero/{id}:
    get:
      tags:
        - hero-controller
      operationId: findHero_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HeroResponse'
    put:
      tags:
        - hero-controller
      operationId: findHero
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeroeRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeroResponse'
    delete:
      tags:
        - hero-controller
      operationId: deleteHero
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
  /v1/hero:
    get:
      tags:
        - hero-controller
      operationId: findAllHero
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
        - name: specs
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/SpecificationHero'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageHeroResponse'
    post:
      tags:
        - hero-controller
      operationId: createHero
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeroeRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeroResponse'
components:
  schemas:
    HeroeRequest:
      type: object
      properties:
        name:
          type: string
        power:
          type: string
    HeroResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        power:
          type: string
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    SpecificationHero:
      type: object
    PageHeroResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/HeroResponse'
        sort:
          $ref: '#/components/schemas/Sort'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/Sort'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
        paged:
          type: boolean
    Sort:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
